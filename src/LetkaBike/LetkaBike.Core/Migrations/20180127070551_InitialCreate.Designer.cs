// <auto-generated />
using LetkaBike.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace LetkaBike.Core.Migrations
{
    [DbContext(typeof(LetkaContext))]
    [Migration("20180127070551_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LetkaBike.Core.Data.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("LetkaBike.Core.Data.Ride", b =>
                {
                    b.Property<int>("RideId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<DateTimeOffset>("HappensOn");

                    b.Property<int?>("LocationCityCityId");

                    b.Property<decimal>("LocationLatitude");

                    b.Property<decimal>("LocationLongitude");

                    b.Property<string>("LocationName");

                    b.Property<int?>("OrganizedByRiderId");

                    b.HasKey("RideId");

                    b.HasIndex("LocationCityCityId");

                    b.HasIndex("OrganizedByRiderId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("LetkaBike.Core.Data.Rider", b =>
                {
                    b.Property<int>("RiderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("Nickname");

                    b.HasKey("RiderId");

                    b.ToTable("Riders");
                });

            modelBuilder.Entity("LetkaBike.Core.Data.RiderRide", b =>
                {
                    b.Property<int>("RiderId");

                    b.Property<int>("RideId");

                    b.HasKey("RiderId", "RideId");

                    b.HasIndex("RideId");

                    b.ToTable("RiderRide");
                });

            modelBuilder.Entity("LetkaBike.Core.Data.Ride", b =>
                {
                    b.HasOne("LetkaBike.Core.Data.City", "LocationCity")
                        .WithMany()
                        .HasForeignKey("LocationCityCityId");

                    b.HasOne("LetkaBike.Core.Data.Rider", "OrganizedBy")
                        .WithMany()
                        .HasForeignKey("OrganizedByRiderId");
                });

            modelBuilder.Entity("LetkaBike.Core.Data.RiderRide", b =>
                {
                    b.HasOne("LetkaBike.Core.Data.Ride", "Ride")
                        .WithMany("Riders")
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LetkaBike.Core.Data.Rider", "Rider")
                        .WithMany("Rides")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
